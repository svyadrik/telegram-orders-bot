import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === Google Sheets setup ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–ó–∞–∫–∞–∑—ã –ë—É—Ç–µ—Ä").worksheet("–õ–∏—Å—Ç1")

# === Logging ===
logging.basicConfig(level=logging.INFO)

# === Global variables ===
ADMIN_ID = 7333104516

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å' –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å" ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    product = query.message.caption or "–ë–µ–∑ –æ–ø–∏—Å—É"
    context.user_data["product"] = product
    context.user_data["username"] = query.from_user.full_name
    context.user_data["user_id"] = query.from_user.id

    keyboard = [[InlineKeyboardButton("1", callback_data="qty_1"),
                 InlineKeyboardButton("2", callback_data="qty_2"),
                 InlineKeyboardButton("3", callback_data="qty_3")]]
    await query.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –æ–¥–∏–Ω–∏—Ü—å –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

# === –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ===
async def qty_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    qty = query.data.split("_")[1]
    context.user_data["quantity"] = qty
    await query.message.reply_text("–ó–∞–ª–∏—à—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É")

# === –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    context.user_data["phone"] = phone
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    context.user_data["datetime"] = now

    sheet.append_row([
        now,
        context.user_data["username"],
        context.user_data["user_id"],
        context.user_data["product"],
        context.user_data["quantity"],
        phone,
        now,
        "–ù–æ–≤–∏–π"
    ])

    message = (
        f"–ù–æ–≤–∏–π –∑–∞–∫–∞–∑:\n"
        f"üë§ {context.user_data['username']}\n"
        f"üì¶ {context.user_data['product']} ‚Äî {context.user_data['quantity']} —à—Ç.\n"
        f"üìû {phone}"
    )
    keyboard = [[
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
    ]]
    await context.bot.send_message(chat_id=ADMIN_ID, text=message, reply_markup=InlineKeyboardMarkup(keyboard))
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ ===
async def admin_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        await query.edit_message_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
    elif query.data == "cancel":
        await query.edit_message_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ ===
async def new_post_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.channel_post:
        post = update.channel_post
        keyboard = [[InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order")]]
        await context.bot.edit_message_reply_markup(
            chat_id=post.chat_id,
            message_id=post.message_id,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# === Main ===
def main():
    app = Application.builder().token(os.getenv("BOT_TOKEN")).webhook_url(os.getenv("WEBHOOK_URL")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^order$"))
    app.add_handler(CallbackQueryHandler(qty_chosen, pattern="^qty_\\d+$"))
    app.add_handler(CallbackQueryHandler(admin_response, pattern="^(confirm|cancel)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler))
    app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, new_post_handler))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=os.getenv("WEBHOOK_URL")
    )

if __name__ == '__main__':
    main()

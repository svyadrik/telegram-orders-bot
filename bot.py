import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import gspread
import os
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)

gc = gspread.service_account(filename='google-credentials.json')
sheet = gc.open_by_key(os.getenv("SHEET_ID")).sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å!")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product = query.data.replace("order_", "")
    user = query.from_user
    context.user_data["product"] = product
    await context.bot.send_message(
        chat_id=user.id,
        text=f"üõç –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å: *{product}*

–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?",
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text.strip()
    if "product" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å' –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.")
        return
    if "quantity" not in context.user_data:
        context.user_data["quantity"] = text
        await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return
    if "phone" not in context.user_data:
        context.user_data["phone"] = text
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        row = [
            now,
            user.full_name,
            user.id,
            context.user_data["product"],
            context.user_data["quantity"],
            context.user_data["phone"],
            now,
            "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        ]
        sheet.append_row(row)
        admin_chat_id = os.getenv("ADMIN_ID")
        msg = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
"
            f"üë§ {user.full_name}
"
            f"üì¶ {context.user_data['product']}
"
            f"üî¢ {context.user_data['quantity']}
"
            f"üìû {context.user_data['phone']}
"
            f"üïì {now}"
        )
        buttons = [[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user.id}_{now}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user.id}_{now}")
        ]]
        await context.bot.send_message(chat_id=admin_chat_id, text=msg, reply_markup=InlineKeyboardMarkup(buttons))
        await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

def main():
    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^order_"))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.COMMAND, start))
    app.run_polling()

if __name__ == '__main__':
    main()
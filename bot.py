from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os

# –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É —Å–ª–æ–≤–Ω–∏–∫–∞—Ö
orders = {bread: 0 for bread in ['–ë–∞—Ç–æ–Ω', '–ë–∞–≥–µ—Ç', '–ö–∞–ª–∞—á', '–ß—ñ–∞–±–∞—Ç—Ç–∞']}
user_orders = {}
breads = list(orders.keys())

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.full_name

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_name not in user_orders:
        user_orders[user_name] = {bread: 0 for bread in breads}

    await update.message.reply_text(
        text="üëã –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å —Ö–ª—ñ–± —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:",
        reply_markup=generate_keyboard(user_name)
    )

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def generate_keyboard(user_name):
    keyboard = [
        [InlineKeyboardButton("üì¶ –í—Å—å–æ–≥–æ", callback_data="none"),
         InlineKeyboardButton("üßæ –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="none")]
    ]

    for bread in breads:
        total = orders.get(bread, 0)
        user_count = user_orders[user_name].get(bread, 0)
        keyboard.append([
            InlineKeyboardButton(bread, callback_data=f"bread_{bread}"),
            InlineKeyboardButton(str(total), callback_data=f"total_{bread}"),
            InlineKeyboardButton("‚ûï", callback_data=f"add_{bread}"),
            InlineKeyboardButton(str(user_count), callback_data=f"my_order_{bread}"),
            InlineKeyboardButton("‚ûñ", callback_data=f"remove_{bread}")
        ])

    keyboard.append([InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_name = query.from_user.full_name
    await query.answer()

    data = query.data
    if "add_" in data:
        bread = data.split("_")[1]
        user_orders[user_name][bread] += 1
        await query.edit_message_text("üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è...", reply_markup=generate_keyboard(user_name))

    elif "remove_" in data:
        bread = data.split("_")[1]
        if user_orders[user_name][bread] > 0:
            user_orders[user_name][bread] -= 1
        await query.edit_message_text("üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è...", reply_markup=generate_keyboard(user_name))

    elif "confirm_order" in data:
        for bread in breads:
            orders[bread] += user_orders[user_name].get(bread, 0)

        order_summary = "\n".join([f"{bread}: {user_orders[user_name][bread]} —à—Ç." for bread in breads])
        await query.edit_message_text("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
        await context.bot.send_message(chat_id=query.message.chat.id, text=f"üßæ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{order_summary}")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN –≤ .env —Ñ–∞–π–ª—ñ!")
        return

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == '__main__':
    main()
